<?php

namespace App;

use App\Models\Admin;
use App\Models\Appointment;
use App\Models\AppointmentFollowUpNote;
use App\Models\Assistant;
use App\Models\Department;
use App\Models\Doctor;
use App\Models\DoctorsPatients;
use App\Models\Drug;
use App\Models\Patient;
use App\Models\PatientMedicalDocument;
use App\Models\PatientMedicalNote;
use App\Models\PatientPayment;
use App\Models\PrescriptionHelper;
use App\Notifications\UserResetPasswordNotification;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Laravel\Passport\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */

    protected $fillable = [
        'user_name', 'email', 'role', 'full_name'
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public function doctor()
    {
        return $this->hasOne(Doctor::class, 'user_id');
    }

    public function patient()
    {
        return $this->hasOne(Patient::class, 'user_id');
    }

    public function admin()
    {
        return $this->hasOne(Admin::class, 'user_id');
    }

    public function assistant()
    {
        return $this->hasOne(Assistant::class,'user_id');
    }

    public function createdMedicalDocuments()
    {
        return $this->hasMany(PatientMedicalDocument::class, 'created_by');
    }

    public function createdPatientPayment()
    {
        return $this->hasMany(PatientPayment::class, 'created_by');
    }

    public function createdPatientMedicalNote()
    {
        return $this->hasMany(PatientMedicalNote::class, 'created_by');
    }

    public function refereeDoctorPatients()
    {
        return $this->hasMany(DoctorsPatients::class, 'created_by');
    }

    public function createdDepartments()
    {
        return $this->hasMany(Department::class, 'created_by');
    }

    public function createdAssistants()
    {
        return $this->hasMany(Assistant::class, 'created_by');
    }

    public function createdAdmins()
    {
        return $this->hasMany(Admin::class, 'created_by');
    }

    public function createdPatients()
    {
        return $this->hasMany(Patient::class, 'created_by');
    }

    public function createdAppointments()
    {
        return $this->hasMany(Appointment::class, 'created_by');
    }

    public function createdAppointmentFollowUpNotes()
    {
        return $this->hasMany(AppointmentFollowUpNote::class, 'created_by');
    }

    public function createdDrugs()
    {
        return $this->hasMany(Drug::class, 'created_by');
    }

    public function createdPrescriptionHelpers()
    {
        return $this->hasMany(PrescriptionHelper::class,'created_by');
    }

    public function sendPasswordResetNotification($token)
    {
        $this->notify(new UserResetPasswordNotification($token));
    }


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::creating(function ($modal) {
            $modal->user_name = $modal->user_name == null ? 'user' . str_pad(User::count(), 4, 0, STR_PAD_LEFT) : $modal->user_name;
        });


    }
}
