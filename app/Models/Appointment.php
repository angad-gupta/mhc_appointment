<?php

namespace App\Models;

use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Appointment extends Model
{
    use SoftDeletes;


    protected $dates = ['deleted_at'];

    protected $fillable = [
        'patient_id', 'schedule_id', 'schedule_date', 'schedule_time', 'note','doctor_id','status'
    ];

    protected $appends = [
        'encrypted_id'
    ];

    // public function setStatusAttribute($status)
    // {
    //     if($status == 'pending')
    //     {
    //         $this->status == '1';
    //     }
    //     elseif($status == 'on-process')
    //     {
    //         $this->status == '4';
    //     }
    //      elseif($status == 'cancel')
    //     {
    //         $this->status == '0';
    //     }
    //     elseif($status == 'complete')
    //     {
    //         $this->status == '2';
    //     }
    //     elseif($status == 'confirmed')
    //     {
    //         $this->status == '3';
    //     }
    //     else{
    //         $this->status = $status;
    //     }

    // }

    // public function getStatusAttribute()
    // {
    //     if($this->status == 1)
    //     {
    //         return 'pending';
    //     }
    //     elseif($this->status == 2)
    //     {
    //         return 'complete';
    //     }
    //     elseif($this->status == 3)
    //     {
    //         return 'confirmed';
    //     }
    //     elseif($this->status == 4)
    //     {
    //         return 'on-process';
    //     }
    //     elseif($this->status == 0)
    //     {
    //         return 'cancel';
    //     }
    //     else{
    //         return $this->status;
    //     }
    // }

    public function getEncryptedIdAttribute()
    {
        return encrypt($this->id);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub


        self::creating(function($model){
            $model->search_id = 'A' . str_pad(Appointment::count(), 4, '0', STR_PAD_LEFT) . decrypt($model->doctor_id) . $model->patient_id . Carbon::now()->format('dmy');
            $model->doctor_id = decrypt($model->doctor_id);
            $model->schedule_date = Carbon::parse($model->schedule_date)->toDateString();
            $model->created_by = auth()->check() ? auth()->user()->id : 0;
        });


    }

    public function doctor()
    {
        return $this->belongsTo(Doctor::class, 'doctor_id', 'id');
    }

    public function patient()
    {
        return $this->belongsTo(Patient::class, 'patient_id', 'id');
    }

    public function createdBy()
    {
        return $this->belongsTo(User::class, 'created_by', 'id');
    }

    public function prescriptions()
    {
        return $this->hasMany(Prescription::class);
    }

    public function notes()
    {
        return $this->hasMany(PatientMedicalNote::class);
    }

    public function documents()
    {
        return $this->hasMany(PatientMedicalDocument::class);
    }

    public function payments()
    {
        return $this->hasMany(PatientPayment::class);
    }

    public function followUpNotes()
    {
        return $this->hasMany(AppointmentFollowUpNote::class);
    }
}
